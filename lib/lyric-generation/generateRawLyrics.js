const { SYSTEM_PROMPTS, USER_PROMPTS } = require("../../constants");
const openai = require("../../openaiClientExport");

module.exports = {
  generateRawLyrics,
};

/**
 * Generates raw lyrics based on a specified meter and prompts.
 *
 * @async
 * @function generateRawLyrics
 * @param {Object} options - The options for generating the lyrics.
 * @param {number} options.lineLimit - The maximum number of lines for the generated lyrics.
 * @param {Array<Array<number>>} options.meter - The meter pattern for the lyrics, an array of arrays of numbers.
 * @param {string} options.selectedUserPrompt - The key for the selected user prompt.
 * @param {string} options.selectedSystemPrompt - The key for the selected system prompt.
 * @returns {Promise<Object>} The raw lyrics generated by the OpenAI API.
 * @throws Will log an error to the console if the API call fails.
 */
async function generateRawLyrics({
  lineLimit,
  meter,
  selectedUserPrompt,
  selectedSystemPrompt,
  restOfSong,
}) {
  try {
    const meterString =
      meter.length > 1
        ? `Make sure to use an alternating meter pattern. One line will use this pattern: ${meter[0].join()} and have ${
            meter[0].length
          } syllables. The next line will use this pattern: ${meter[1].join()} and have ${
            meter[1].length
          } syllables.`
        : `Make sure to use an alternating meter pattern. One line will use this pattern: ${meter[0].join()} and have ${
            meter[0].length
          } syllables.`;
    const chatCompletion = await openai.chat.completions.create({
      temperature: 1.2,
      messages: [
        {
          role: "system",
          content: SYSTEM_PROMPTS[selectedSystemPrompt],
        },
        USER_PROMPTS[selectedUserPrompt](lineLimit, meterString, restOfSong),
      ],
      model: "gpt-4o",
    });
    return chatCompletion.choices[0].message.content
      .split("\n")
      .filter((e) => e.length > 0)
      .map((e) => e.trim());
  } catch (err) {
    console.log(err);
  }
}
